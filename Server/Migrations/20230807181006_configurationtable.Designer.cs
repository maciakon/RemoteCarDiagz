// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemoteCarDiagz.Server.Data;

#nullable disable

namespace RemoteCarDiagz.Server.Migrations
{
    [DbContext(typeof(RemoteCarDiagzContext))]
    [Migration("20230807181006_configurationtable")]
#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
    partial class configurationtable
#pragma warning restore CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("RemoteCarDiagz.Shared.Domain.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicDashboardUid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("RemoteCarDiagz.Shared.Domain.Measurement", b =>
                {
                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.HasKey("Value");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Value = 4,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 5,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 10,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 11,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 12,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 13,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 15,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 16,
                            IsActive = false,
                            IsAvailable = true
                        },
                        new
                        {
                            Value = 17,
                            IsActive = false,
                            IsAvailable = true
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
