@page "/configuration"
@using System.Collections.Generic
@using RemoteCarDiagz.Shared.Domain
@using RemoteCarDiagz.Shared.Requests
@inject HttpClient Http

<h1>Active PIDs</h1>

<p>Active PIDs retrieved from server</p>

@if (activeMeasurements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="width: 60%">Name</th>
                <th style="width: 40%">Active</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var measurement in activeMeasurements)
            {
                <tr>
                    <td>@measurement.Value.GetFriendlyName()</td>
                    <td>
                        <button type="button" class="@GetButtonState(measurement.IsActive)" @onclick="() => TogggleMeasurementActive(measurement)">@GetButtonText(measurement.IsActive)</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Measurement> activeMeasurements;

    private string GetButtonState(bool isActive)
    {
        return isActive ? "btn btn-danger" : "btn btn-success";
    }
    private string GetButtonText(bool isActive)
    {
        return isActive ? "Deactivate" : "Activate";
    }

    private async Task TogggleMeasurementActive(Measurement measurement)
    {
        measurement.IsActive = !measurement.IsActive;
        var toggleActivationRequest = new ToggleActivateMeasurementRequest { Pid = measurement.Value, IsActive = measurement.IsActive  };
        var response = await Http.PostAsJsonAsync<ToggleActivateMeasurementRequest>("configuration", toggleActivationRequest);
    }
    
    protected override async Task OnInitializedAsync()
    {
        activeMeasurements = await Http.GetFromJsonAsync<List<Measurement>>("configuration");
    }
}
